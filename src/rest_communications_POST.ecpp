<#
 #
 # Copyright (C) 2019 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file rest_documents_POST.ecpp
 * \author Clement Perrette <ClementPerrette@eaton.com>
 * \brief Implementation of rest handler for security wallet
 *        CREATE a new document
 */
 #><%pre>
#include <algorithm>
#include <string>
#include <fstream>

#include <sys/types.h>
#include <dirent.h>
#include <unistd.h>

#include "helpers.h"

#include "cam_accessor.h"
#include "cam_exception.h"

#include <cxxtools/jsonserializer.h>

#include "fty_common_rest.h"

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>

  using namespace cam;
  using namespace restapi;

  //check if we can execute
  static const std::map <BiosProfile, std::string> PERMISSIONS = {
          {BiosProfile::Admin, "C"}
  };

  CHECK_USER_PERMISSIONS_OR_DIE(PERMISSIONS);

  Path path(request.getPathInfo());

  try
  {
    Accessor accessor( CLIENT_ID, 1000, END_POINT);

    //extract the data
    CredentialAssetMapping mapping;
    request.getBody() >>= mapping;

    //try to save it
    accessor.createMapping(mapping);

    std::string newId = createId(mapping);

    std::string locationNewItem = (path.getPathStr() + "/"+ newId);

    // Send reply.
    reply.setHeader(tnt::httpheader::location, locationNewItem);

    cxxtools::SerializationInfo si;
    si.addMember("id") <<= newId;

    cxxtools::JsonSerializer serializer(reply.out());
    serializer.serialize(si);

  }
  catch(const CamMappingAlreadyExistsException& /*e*/)
  {
    std::string msg = TRANSLATE_ME ("Communication item already exist");
    http_die ("bad-request-document", msg.c_str ());
  }
  catch(const std::exception& e)
  {
    std::string msg = TRANSLATE_ME ("Error while creating a communication item: %s", e.what ());
    http_die ("internal-error", msg.c_str ());
  }

</%cpp>
